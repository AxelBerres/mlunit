=====================================
   m l U n i t   C H A N G E L O G
=====================================

mlUnit 2.1 (2025-07-08)
-----------------------

  - Compatibility with MATLAB R2025a.
  - Break the build if mlUnit itself exits with a non-test error.
    On non-test errors, we expect the build to pass on the error,
    even if failontestfail has been set, because there may be no
    unit test results documenting anything wrong.
    Non-test errors may be poorly set up unit tests or internal mlUnit errors.
  - Fix stack trace filtering of internal mlUnit calls to also filter call_with_data.


mlUnit 2.0 (2025-03-14)
-----------------------

  - Include MATLAB unit tests in mlUnit runs.
    This is helpful for using test features that mlUnit may be lacking,
    and for iteratively migrating tests.
    Any MATLAB unit tests subclassing matlab.unittest.TestCase
    that can be found in the test object folder, will be included
    in mlUnit runs that execute all suites of a folder.
    Includes only class-based MATLAB unit tests, not script-based MATLAB unit tests,
    so that MATLAB does not misinterpret random test scripts as MATLAB unit tests.
  - Allow data exchange between tests and their fixtures in a function test suite.
    When using function-based test suites, you can pass data between the set_up fixture,
    your tests, and the tear_down fixture by using input and output arguments.
    You can also pass data from the suite_set_up fixture to the test set_up fixture,
    and to the suite_tear_down fixture similarly.
  - Fix partial incompatibility with R2017b.
  - Fix a recently introduced run time error that happened when an error in the
    suite_tear_down fixture was about to be added to previous errors of that suite.


mlUnit 1.10 (2025-02-10)
------------------------

  - Added mlunit_variation, providing parameter variations for tests.
    A test can call mlunit_variation to define a dynamic or static
    list of parameter configurations that are used to call the same
    function several times, but with different parameters.
    If any of the variations fail or raise an error, the others
    continue to run. The test result will be the worst result of
    its variations.


mlUnit 1.9.9 (2024-12-23)
-------------------------

  - Added support for a final MATLAB command to the Ant automation,
    so that a command can be run after the tests. For example,
    for cleaning up without triggering a Save dialog.


mlUnit 1.9.8 (2024-11-13)
-------------------------

  - Compatibility with MATLAB R2024b.
  - Fix printable output on R2015b, where isstring was included,
    but still had errors.
  - When using assert_equals functions, also output difference markers
    for common cell arrays.
  - Improve run time by resetting the path only when it changes.


mlUnit 1.9.7 (2024-06-21)
-------------------------

  - Support MATLAB strings for comparison and output.
  - Support multidimensional cell array output.
    When assert_equals outputs diff information, the structure of 2D cell
    arrays is maintained. The structure of higher dimensions gets linearized.
  - Warn if disable_tests is ineffective, because a suite has been triggered
    individually.
  - Support a reason when excluding functions with load_tests_from_mfile.


mlUnit 1.9.6 (2023-10-20)
-------------------------

  - Compatibility with MATLAB R2023b.

  - Fix: When using the Ant automation, MATLAB's console output is missing.
  - Fix: When filtering the error stack, mlUnit let its own
    assert_not_exist_file pass through.


mlUnit 1.9.5 (2021-07-19)
-------------------------

  - Compatibility with MATLAB R2022a.
  - mlunit_rerun('what') prints what mlunit_rerun would do as a default action,
    i.e. if being called with no arguments.
  - Give a warning when a test function has the same name as a directory.

  - Fix: When calling a test function on the MATLAB console, and a
    directory of the same name exists, no tests actually execute.


mlUnit 1.9.4 (2021-09-17)
-------------------------

  - Compatibility with MATLAB R2021a.
  - Linux compatibility of mlUnit internal test suites.
  - Don't execute suite_set_up and suite_tear_down, when a test suite
    contains no tests. Either because no test_* functions exist, or
    because all test_* functions were disabled.


mlUnit 1.9.3 (2021-01-25)
-------------------------

  - Support UNIX/Linux execution of build.xml Ant scripts.
  - Allow disabling all of a suite's test cases when using disable_tests.
  - mlunit_rerun allows replay of the most recent suite run (triggered
    by calling run_suite_collection or recursive_test_run). Replaying the
    latest fails and/or errors, allows you to concentrate on them,
    quickly fix them and verify your fix.
  - mlunit_single run only a single test out of a function test suite.
  - Default 'catch_output' to false, so that manual test runs display
    test output by default. Otherwise, testers will overlook problems
    in the test setup, when they manifest as output, not as error.
    Ant build.xml execution still defaults to 'catch_output' of true,
    so that automation logs are clean and capture output in the jUnit XML.

  - Fix: Tests skipped during set_up don't tell the call stack any more.
  - Fix: Proper encoding in jUnit reports. Always UTF-8.
  - Fix: When adding a directory to the MATLAB search path, that is
    a descendant of a mlunit_tempdir controlled directory, mlUnit does
    not trigger a MATLAB warning anymore.
  - Fix: Prevent double sprintf evaluation when using message arguments
    in assert_equals calls.


mlUnit 1.9.2 (2020-08-18)
-------------------------

  - Skipped tests don't tell the call stack any more.
  - assert_exist_file and assert_exist_dir may take an optional argument,
    specifying the expected exist return value.
  - assert_not_exist_file checks for absence of a file or directory.


mlUnit 1.9.1 (2020-05-13)
-------------------------

  - Fix: Handle bdclose exceptions that may occur when mlUnit closes
    a model during environment reset, but the model is in compile mode.


mlUnit 1.9.0 (2020-03-30)
-------------------------

  - You may statically disable tests by calling the disable_tests method
    on the result of load_tests_from_mfile. This supersedes the disable
    arguments to load_tests_from_mfile introduced in mlUnit 1.8.0.
  - Loading tests from MFiles works across all MATLAB versions by using
    load_tests_from_mfile. This deprecates output_tests_from_mfile.
  - mlUnit closes Simulink block diagrams opened by tests or set_up or
    tear_down fixtures.

  - Fix: Call MATLAB on paths containing spaces.
  - Fix: Handle suite_tear_down errors properly.
  - Fix: Restore Ant XML files to UTF-8 format, which was mangled before.


mlUnit 1.8.0 (2020-02-26)
-------------------------

  - assert_exist_dir checks for existence of a directory.
  - assert_contains checks if a search string can be found in a text.
  - mlunit_tempdir creates a temporary directory, optionally copies content,
    then removes the directory automatically, after the test's tear_down.
    This should help with some integration tests.
  - mlunit_skip skips a test at run time. Skipped tests will generally count
    as passed. However their respective tear_down will still run, and may
    ultimately throw an error.
  - You may statically disable tests by providing arguments 'skip' and a cellstr
    of test names in load_tests_from_mfile. These tests will also be skipped,
    but their set_up and tear_down fixtures will not run.
  - mlUnit parameter 'catch_output' catches console output that occurs during
    tests (and test-level fixtures), and includes it in the jUnit report.
  - Execution time is now given for each test case in the jUnit report.
  - Compatibility with MATLAB R2018b.
  - Compatibility with MATLAB R2007b. Scrapped R2006b support.
  - Console output now produces space above new items, instead of below them.

  - Fix: Guard mlUnit parameters against `clear` being called in user's
    code provided in the Ant script's `additional.cmd` property.
  - Fix: If warnings are included in caught test output, their hilight markers
    (making the text orange in MATLAB) are deleted, because they are
    incompatible with XML.
  - Fix: The Ant build script is now able to display MATLAB output while running
    even for newer MATLAB versions (R2015b and newer).
  - Fix: Output order of test events now is 1. Failed, 2. Skipped, 3. Errors.
    This reflects the order of occurence. If one test has a failure and an error,
    this may only have come from an error in its tear_down fixture.
    Failure and skip can not happen at the same time in one test.
  - Fix: Filter runtime error messages in the same way when being run with or
    without MATLAB argument -automation.
  - Fix: Filter new assert functions in stack output.


mlUnit 1.7.0 (2018-11-21)
-------------------------

  - assert_exist_file checks for existence of a file.
  - Let recursive_test_run/run_suite_collection fail on test failures, if so
    desired. This simplifies automation, as we do not rely on specific console
    output from recursive_test_run anymore.
  - Reduce assert_equals diagnostic output to a fixed length of about 80
    characters, and also omit up to about 20 characters to the first real
    difference.
  - Improved execution time when using assert_equals on very large cell arrays.
    Very large cell arrays will take printable() a long time to prepare.
    Optimization dropped execution speed for one example from about 40s to
    about 8s on R2007b.
  - Provide release agnostic nargchk/narginchk replacement.

  - Fix: Out of memory when using assert_equals on very large cell arrays, or
    similarly large data. Very large input would cause shortest_alignment to
    run out of memory, as it has a quadratic memory print.
  - Fix: get_subfunction_names mistakes single output arguments for function names.


mlUnit 1.6.10 (2015-11-03)
--------------------------

  - Let MATLAB find mlUnit as proper toolbox. Users can query mlUnit version
    information by calling `>> ver('mlunit')` after having loaded mlUnit.
    However, it is necessary that the Contents.m is living inside a folder
    literally called "mlunit".
  - Additional failontestfail option in build.xml lets user choose whether the
    target should fail when tests failed or not.
  - Enable diff markers for multi-line char arrays and for cellstr arrays.
  - Align strings when preparing for diff marking. Implement alignment according
    to the shortest Levenshtein distance.
  - BSD license chosen for find_struct_differences and its test.
  - Support for MATLAB R2015b. In order to use function test cases with R2015b,
    the test cases need to be migrated. Instead of
    `test = load_tests_from_mfile(test_loader)`, use `output_tests_from_mfile`.
    This is a MATLAB script instead of a proper function.
  
  - Fix: matlabcommand.xml's logfile option is not actually optional
  - Fix: assert_equals judges Inf and Inf as not equal
  - Fix: stack expansion for syntax errors forgets to remove .m file extension
  - Fix: assert_equals outputs 'zeros(1,0)' for empty numerical arrays of
    size [1, 0].
  - Fix: printable fails for empty char array of size [0, 1] or [1, 0].
  - Fix: assert_equals judges empty arrays not equal, if their (empty) sizes
    differ
  - Fix: jUnit XML report given and actual encoding mismatch due to gap marker;
    reports will be ISO-8859-1 in order to avoid manual UTF-8 conversion.


mlUnit 1.6.9 (2015-06-17)
-------------------------
  
  - Remove deprecate Ant code handling for matlab.bat or delegate matlab.exe
  - Add matlab.root Ant property for easier MATLAB referencing
  - Reliably fetch MATLAB executable from the system path if neither matlab.root
    nor matlab.exec given.
  - Allow single test suite execution on console for function test suites.
    Works by calling the test suite directly on the console. Not genericly
    possible for class-based test suites, as each class' constructor handles
    inheritance itself.
  - Allow single test suite execution on console with recursive_test_run.
  - Allow relative path names with recursive_test_run. [B#23]
  - Test reports get only generated if target directory argument is provided.
  - Remove quasi-reflective test name check, as we only instantiate test objects
    with automatically retrieved test cases. Also, it messed up when we tried to
    use it on methods inherited from test_case, e.g. suite_set_up, which often
    would only be known after the child constructor, not after the parent
    constructor.
  - Remove mlunit_reflect.
  - Added suite setup and teardown handling. These execute once before any
    test of a suite executes, and after all tests of a suite have executed,
    respectively. If suite_set_up and suite_tear_down succeed without error,
    the other set_up/tear_down/test functions execute as usual. However, if
    suite_set_up fails, test execution is omitted. If suite_set_up or
    suite_tear_down fails, another test is added to the results in order to
    communicate the problem. This is convention with jUnit.
  - jUnit reports are generated only when recursive_test_run is called with a
    targetdir argument
  - Consistent add-to logic for custom assert messages across all assert
    functions; the user's message now always complements the function's.

  - Further backend refactoring, merging diverged execution models:
      + Added initialize_execution and finalize_execution listener methods
      + Centralized execution of a test suite collection into
        mlunit_suite_runner/run_suite_collection.m, separating only the choice
        of listeners from former recursive_test_run implementation
      + recursive_test_run kept for compatibility
      + Closes [F#16]

  - Fix: Cropped parts of report file package structure,
    if being executed on relative dir, and the dir name is part of a nested dir.
  - Fix: mlUnit parameters get reset when tests execute javaaddpath, javarmpath,
    clear('functions'), or some such functions.

  [F#16] http://sourceforge.net/p/mlunit/feature-requests/16/
  [B#23] http://sourceforge.net/p/mlunit/bugs/23/


mlUnit 1.6.8 (2015-04-14)
-------------------------

  - mlUnit parameter changes in test of fixture functions will be reverted
    after each test's tear_down execution
  - Expanded mlunit_param to get and set the whole parameter configuration.
  - recursive_test_run restores path, pwd and mlunit_param to pre-run state
    after execution
  - simplify error list item names in GUI to omit the suite name, as test suites
    cannot nest anymore
  - Tighten failure display for multi-line output.
  - Link trace log items instead of giving an absolute paths, when being
    executed on the command line. Deliberately disabled when using the Ant task.
    No support for use in GUI, though. Turns out, a MATLAB GUI edit box can not
    display HTML links as the console does. Yair Altman managed to get down to
    switching an edit box to all-HTML rendering [Rich]. But then we'd need to
    HTMLize the whole input, not just the links. Also, findjobj would be
    necessary. See for yourself [jobj].
  - Shrink trace log items to only their filename, if requested by new mlUnit
    parameter abbrev_trace.
  - Lighten recursive_test_run output by setting every failure/error apart by
    a blank line.
  - mlunit_param contains all mlUnit internal parameters by default values.
  - Provide some verbose output, if requested by new mlUnit parameter.
  - Reenable live console output, in order for debug output to mix into the
    proper locations in the log.
  - Add suite count to console summary.
  - Provide difference markers in mlUnit output when comparing strings with
    assert_equals.

  - Major backend refactoring for easier maintenance, particularly
    by flattening inheritance and by separating concerns, including:
      + prepend mlunit_ prefix to classes/functions that use common names,
        because of MATLAB's global namespace for functions and classes:
        @mlunit_reflect, @mlunit_testsuite, mlunit_fail, @mlunit_gui
        (renamed from gui_test_runner)
      + retain names in order to provide compatibility with existing tests:
        test_case, test_loader, assert_*, recursive_test_run
      + @test_case restricted to being a base class template for test classes,
        separating actual test execution into @mlunit_suite_runner for now
      + @mlunit_testsuite restricted to being a simple, one-level list of test
        cases; dropped support for manually constructing multi-level test suites
      + @test_result deleted, in favor of simple struct array, and in an effort
        to separate the actual results from how they are displayed; summarizes
        result aspects from former @test_result, @text_test_result, and
        @gui_test_result
      + @mlunit_progress_listener added, as mechanism for the gui,
        or text output, or others to listen on test case execution states
      + @mlunit_progress_listener_gui added, overtaking the update mechanisms
        from former @gui_test_result, making it obsolete
      + @gui_test_result deleted
      + @mlunit_suite_runner added, as reusable mechanism to execute
        one test suite
      + @mlunit_errorinfo centralizes all error parsing and string output
      + failures also handled by @mlunit_errorinfo

  - Fix: assert() calls break R2006b compatibility.
  - Fix: mat2str displays strings differently on R2006b and probably before.
  - Fix: function stringification contains whitespace on R2006b, but not later.
  - Fix: errors in a set_up fixture prevent execution of the tear_down
    fixture and mlunit_param reversion
  - Fix: Invalid jUnit XML from hapless MATLAB error message [B#20]
  - Fix: jUnit XML indentation sometimes applied to mid-line tags
  - Fix: printable() breaks on MATLAB or Java objects, and function handles
  - Fix: GUI Show button does not work in newer MATLAB versions, e.g. R2013b.
  - Fix: GUI error text is not shown in monospace font, but error messages rely
    on a monospace font, e.g. assert_equals.

  [B#20] https://sourceforge.net/p/mlunit/bugs/20/
  [Rich] http://undocumentedmatlab.com/blog/rich-matlab-editbox-contents
  [jobj] http://undocumentedmatlab.com/blog/findjobj-find-underlying-java-object


mlUnit 1.6.7 (2015-01-08)
-------------------------

  - Added assert_matfile_equals: Raise an error if two mat Files differ. [F#12]
  - Added support for partial stack comparison in assert_error.
  - Test suite functions may declare their host function on the first or
    succeeding lines.
  - assert_equals failure prints differences on top of each other, instead of
    next to teach other for improved readability
  - Improved recursive_test_run's output for readability. Which functions failed
    should now be easily discernible. Of course, random warnings and disps still
    clutter the output. [F#14]
  - Failures now only print a part of the stack trace and hides the higher
    calling chain.
  - assert_* functions provide default failure message if none given
  - Failures now recognized by typed error. Still needs magic string for masking
    the actual error message.
  - Sample directory for assert failure outputs.
  - Enable (admittedly hacked) unit testing for private functions.
  - assert_equals now only displays differences when comparing structs,
    instead of slapping a wall of text in your face

  - Fix: build.xml did not execute mlUnit tests; report directory was not being
    created; MATLAB automation options conflicted; MATLAB property check failed.
  - Fix: Error prelude not filtered for newer MATLABs (around R2011b)
  - Fix: Test suite functions whose host function is not declared on the very
    first line lead to an unintelligible error.
  - Fix: some numeric arrays deemed equal, even if of different size
  - Fix: assert_not_equals failure message suggests having used assert_equals.
  - Fix: printable returns logical for 1x0 char strings
  - Fix: empty 1x0 and 0x0 char strings deemed different
  - Fix: assert_error executes functions given as string in its own workspace

  [F#12] http://sourceforge.net/p/mlunit/feature-requests/12/
  [F#14] http://sourceforge.net/p/mlunit/feature-requests/14/


mlUnit 1.6.6 (2013-12-13)
-------------------------

  - assert_error may take a function handle or an eval string for execution
  - assert_error can check for the error identifier or even the stack
  - Changed assert_warning's argument order, to be consistent with assert_error
    order.
  - Let recursive_test_run print test result overview. [F#14]

  - Fix: wrong assert_* usage yields a failure, but should yield an error
  - Fix: calling assert_warning without arguments is confusing
  - Fix: test_add_error_with_stack depends on specific line numbers and
    frequently fails without reason.
  - Fix: recursive_test_run omits class-based test implementations. [B#16]
    Added dirset function from Zyndric's pathtools.

  [F#14] https://sourceforge.net/p/mlunit/feature-requests/14/
  [B#16] https://sourceforge.net/p/mlunit/bugs/16/


mlUnit 1.6.5 (2013-11-19)
-------------------------

  - Refactored implementation of assert_(not_)equals(_withequalnans).
  - Absolute tolerance for equalling distinct differences now in place for all
    assert_(not_)equals(_withequalnans) functions.
  - Equality tolerance can be checked with NaN value matrices as well.
  - NaN equality is now an mlUnit parameter named equal_nans, eliminating
    functions named assert_(not_)equals_withequalnans. [F#13]

  - Fix: eps comparison for vectors yields undetermined results
  - Fix: eps comparison fails for vectors of incompatible types, e.g. double and
    uint8. Changed assert_equals to compare eps only for equal numeric types.
  - Fix: Rerunning a testcase from the mlUnit GUI does not update the test's
    implementation. [B#22]
  - Fix: assert_error fails on R2007b and later. [B#21]
  - Fix: normal assertion strings get sprintf evaluated.

  [F#13] https://sourceforge.net/p/mlunit/feature-requests/13/
  [B#21] https://sourceforge.net/p/mlunit/bugs/21/
  [B#22] https://sourceforge.net/p/mlunit/bugs/22/


mlUnit 1.6.4 (2013-05-27)
-------------------------

  - Removed install.m script. Content not needed, since assert can not get
    shadowed anymore.
  - assert_true and assert_false may be called without arguments, in which case
    they pass or fail respectively.
  - assert_equals and assert_equals_withequalnans can receive an absolute
    tolerance to handle slight differences equally.
  - assert_warning checks for a specific warning when executing a function.
  - Updated m2html documentation.

  - Fix: license strings
  - Fix: stack trace filter for assert functions did not include newer
    assert wrappers
  - Fix: Failed on missing subclass argument.
  - Fix: gui_test_runner failed on a callback invocation with empty handles for
    MATLAB R2008b. Reported as [B#15].
  - Fix: MATLAB shadow warning on assert function. Reported as [B#17].
    Testcases must be migrated to use assert_true instead.

    [B#15] https://sourceforge.net/p/mlunit/bugs/15/
    [B#17] https://sourceforge.net/p/mlunit/bugs/17/


mlUnit 1.6.3 (2012-07-13)
-------------------------

  - Provide assert_equals methods that equal NaN values. #2873.
  - Fix: Do not indent raw text in XML generation. #2874.


mlUnit 1.6.2 (2012-07-12)
-------------------------

  - Refactored XML generation.
  - Fix: XML head tag.


mlUnit 1.6.1 (2012-06-18)
-------------------------

  - Support for shallow and recursive path dependencies in Ant mlUnit task.
  - Support for executing additional MATLAB commands from Ant mlUnit task.
  - Fix: Empty relative directory yielded ugly dot.
  - Fix: Empty default shallow directory property.


mlUnit 1.6 (2012-06-13)
-----------------------

  - Added Ant build script. Lets other Ant scripts trigger recursive execution
    of all test scripts they like to execute.
  - Added assert_error.
  - Added generation of jUnit compatible XML output
  - Added recursive execution of all test script files in a specific folder and
    all its subfolders
  - Expanded mlUnit core test_case to return its function_name.


mlUnit 1.5.2 (2012-06-06)
-------------------------

  - Added assert_empty, assert_not_empty.
  - Fix: assert_equals, assert_not_equals failed when building strings from cell
    or structure arrays.
  - Simplified assert accessor functions. Made them consistent.

